////
/// Text utiltities for alignment and sizing
/// @group Utilities
////

///
/// For generating responsive utilities for text alignment
/// @type Map [$qnorr-grid-breakpoints-list] -
///
$u-text-alignment-breakpoints-list: $qnorr-grid-breakpoints-list !default;

///
/// Aligns an text to value
///
.u-text-c { text-align: center; }
.u-text-l { text-align: left; }
.u-text-r { text-align: right; }
.u-text-j { text-align: justify; }
.u-text-i { text-align: inherit; }


@each $breakpoint in $u-text-alignment-breakpoints-list {
  @include mappy-bp($breakpoint){
    .u-text-c#{$qnorr-breakpoint-separator}#{$breakpoint} { text-align: center; }
    .u-text-l#{$qnorr-breakpoint-separator}#{$breakpoint} { text-align: left; }
    .u-text-r#{$qnorr-breakpoint-separator}#{$breakpoint} { text-align: right; }
    .u-text-j#{$qnorr-breakpoint-separator}#{$breakpoint} { text-align: justify; }
    .u-text-i#{$qnorr-breakpoint-separator}#{$breakpoint} { text-align: inherit; }
  }
}


///
///
/// @todo everything do NOT USE
@each $scale, $breakpoint in $qnorr-typescale-maps {
  @if type-of($breakpoint) == 'map'{
     .u-ts-#{$scale}{
        @include responsive-font-size($breakpoint);
     }
  }
  @else if type-of($breakpoint) == 'list'{
     .u-ts-#{$scale}{
        font-size: px-to-rem(nth($breakpoint, 1));
        @if (length($scale) > 1) {
           line-height: round(strip-unit(nth($breakpoint, 2)/nth($breakpoint, 1) ));
        }
     }
  }
  @else {
     .b-ts-#{$scale}{
        font-size: px-to-rem($breakpoint);
     }
  }
}

//type weight
@each $weight in $qnorr-font-weights {
  .u-tw-#{$weight} { font-weight: $weight; }
}
