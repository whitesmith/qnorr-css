///
/// Makes fluid typography beteween to limits
///
/// @group Tools
/// @link https://css-tricks.com/snippets/css/fluid-typography/
///
/// @requires $qnorr-breakpoints-map - if using string keys for min-vw and max-vw
/// @requires {mixin} mappy-breakpoints::mappy-breakpoints -
///   url https://github.com/zellwk/mappy-breakpoints
/// @requires SassCore::map-get
/// @param {Number} $min-font-size
/// @param {Number} $max-font-size
/// @param {*} $min-vw
/// @param {*} $max-vw
/// @param {String} $prop ["font-size"]
///
/// @example scss - min and max viewport width can be both numbers or qnorr breakpoints map keys
///  .selector { @include fluid-type(24px, 56px, 480px, 1024px);
///  .selector { @include fluid-type(24px, 56px, 'sm', 'lg');
///
@mixin fluid-type( $min-font-size, $max-font-size, $min-vw, $max-vw, $prop: "font-size") {
  $u1: null;
  $u2: null;

  @if type-of($min-vw) == "string" {
    // re-assign argument passed as breakpoint key string to actual value
    $min-vw: map-get($qnorr-breakpoints-map, $min-vw);
    $u1: unit($min-vw);
  } @else {
    $u1: unit($min-vw);
  }

  @if type-of($max-vw) == "string" {
    $max-vw: map-get($qnorr-breakpoints-map, $max-vw);
    $u2: unit($max-vw);
  } @else {
    $u2: unit($max-vw);
  }

  $u3: unit($min-font-size);
  $u4: unit($max-font-size);

  @if $u1 == $u2 and $u1 == $u3 and $u1 == $u4 {
    & {
      #{$prop}: $min-font-size;

      @include mappy-bp($min-vw) {
        #{$prop}: calc(#{$min-font-size} + #{strip-unit($max-font-size - $min-font-size)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}));
      }

      @include mappy-bp($max-vw){
        #{$prop}: $max-font-size;
      }
    }
  }
}
